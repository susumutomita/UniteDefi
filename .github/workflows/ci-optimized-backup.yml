name: ci

on:
  push:
  pull_request:
    branches: ['main']

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"
  # Optimize Rust compilation
  CARGO_INCREMENTAL: "1"
  CARGO_NET_RETRY: "10"
  RUST_BACKTRACE: "short"

jobs:
  # Setup job for common dependencies
  setup:
    runs-on: ubuntu-latest
    outputs:
      rust-cache-key: ${{ steps.rust-cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Generate Rust cache key
        id: rust-cache-key
        run: |
          echo "key=${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock', 'rust-toolchain.toml') }}" >> $GITHUB_OUTPUT

  # Lint job - runs in parallel
  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: lint-${{ needs.setup.outputs.rust-cache-key }}
          cache-on-failure: true
          workspaces: |
            .
            ./contracts/near-htlc

      - name: Install Node.js dependencies
        run: pnpm install

      - name: Run markdown lint
        run: pnpm run lint

      - name: Run Rust clippy
        run: |
          cargo clippy --all-targets --all-features -- -D warnings
          cd contracts/near-htlc && cargo clippy --all-targets --all-features -- -D warnings

      - name: Run YAML lint
        run: pnpm run lint:yaml

  # Test job - runs in parallel
  test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.4

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ needs.setup.outputs.rust-cache-key }}
          cache-on-failure: true
          workspaces: |
            .
            ./contracts/near-htlc

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Cache Foundry
        uses: actions/cache@v4
        with:
          path: |
            ~/.foundry/cache
            contracts/ethereum/cache
            contracts/ethereum/out
          key: foundry-${{ runner.os }}-${{ hashFiles('**/foundry.toml', '**/**.sol') }}
          restore-keys: |
            foundry-${{ runner.os }}-

      - name: Install Node.js dependencies
        run: pnpm install

      - name: Run Rust tests
        run: |
          cargo test --workspace
          cd contracts/near-htlc && cargo test

      - name: Run Foundry tests (if contracts exist)
        working-directory: contracts/ethereum
        run: |
          if [ -f foundry.toml ]; then
            forge test || echo "No Foundry tests found or tests failed"
          fi

  # Format check job - runs in parallel
  format:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: format-${{ needs.setup.outputs.rust-cache-key }}
          cache-on-failure: true
          workspaces: |
            .
            ./contracts/near-htlc

      - name: Run Rust format check
        run: |
          cargo fmt --all -- --check
          cd contracts/near-htlc && cargo fmt -- --check

  # Success job - waits for all parallel jobs
  ci-success:
    runs-on: ubuntu-latest
    needs: [lint, test, format]
    if: always()
    steps:
      - name: Check all jobs succeeded
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Lint job failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Test job failed"
            exit 1
          fi
          if [[ "${{ needs.format.result }}" != "success" ]]; then
            echo "Format job failed"
            exit 1
          fi
          echo "All jobs succeeded!"
